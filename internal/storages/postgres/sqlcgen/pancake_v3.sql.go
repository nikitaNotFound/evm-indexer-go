// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: pancake_v3.sql

package sqlcgen

import (
	"context"
)

const addPancakeV3Pool = `-- name: AddPancakeV3Pool :exec
INSERT INTO pancake_v3_pools (address, token0, token1, fee, tick_spacing)
VALUES ($1, $2, $3, $4, $5)
`

type AddPancakeV3PoolParams struct {
	Address     string `json:"address"`
	Token0      string `json:"token0"`
	Token1      string `json:"token1"`
	Fee         string `json:"fee"`
	TickSpacing string `json:"tick_spacing"`
}

func (q *Queries) AddPancakeV3Pool(ctx context.Context, arg AddPancakeV3PoolParams) error {
	_, err := q.db.ExecContext(ctx, addPancakeV3Pool,
		arg.Address,
		arg.Token0,
		arg.Token1,
		arg.Fee,
		arg.TickSpacing,
	)
	return err
}

const countPancakeV3Pools = `-- name: CountPancakeV3Pools :one
SELECT COUNT(*) FROM pancake_v3_pools
`

func (q *Queries) CountPancakeV3Pools(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countPancakeV3Pools)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllPancakeV3Pools = `-- name: GetAllPancakeV3Pools :many
SELECT address, token0, token1, fee, tick_spacing FROM pancake_v3_pools
ORDER BY address
LIMIT $1 OFFSET $2
`

type GetAllPancakeV3PoolsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllPancakeV3Pools(ctx context.Context, arg GetAllPancakeV3PoolsParams) ([]*PancakeV3Pool, error) {
	rows, err := q.db.QueryContext(ctx, getAllPancakeV3Pools, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*PancakeV3Pool
	for rows.Next() {
		var i PancakeV3Pool
		if err := rows.Scan(
			&i.Address,
			&i.Token0,
			&i.Token1,
			&i.Fee,
			&i.TickSpacing,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
