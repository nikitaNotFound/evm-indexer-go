// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: uniswap_v3.sql

package sqlcgen

import (
	"context"
)

const addUniswapV3Pool = `-- name: AddUniswapV3Pool :exec
INSERT INTO uniswap_v3_pools (address, token0, token1, fee, tick_spacing)
VALUES ($1, $2, $3, $4, $5)
`

type AddUniswapV3PoolParams struct {
	Address     string `json:"address"`
	Token0      string `json:"token0"`
	Token1      string `json:"token1"`
	Fee         string `json:"fee"`
	TickSpacing string `json:"tick_spacing"`
}

func (q *Queries) AddUniswapV3Pool(ctx context.Context, arg AddUniswapV3PoolParams) error {
	_, err := q.db.ExecContext(ctx, addUniswapV3Pool,
		arg.Address,
		arg.Token0,
		arg.Token1,
		arg.Fee,
		arg.TickSpacing,
	)
	return err
}

const countUniswapV3Pools = `-- name: CountUniswapV3Pools :one
SELECT COUNT(*) FROM uniswap_v3_pools
`

func (q *Queries) CountUniswapV3Pools(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUniswapV3Pools)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllUniswapV3Pools = `-- name: GetAllUniswapV3Pools :many
SELECT address, token0, token1, fee, tick_spacing FROM uniswap_v3_pools
ORDER BY address
LIMIT $1 OFFSET $2
`

type GetAllUniswapV3PoolsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllUniswapV3Pools(ctx context.Context, arg GetAllUniswapV3PoolsParams) ([]*UniswapV3Pool, error) {
	rows, err := q.db.QueryContext(ctx, getAllUniswapV3Pools, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*UniswapV3Pool
	for rows.Next() {
		var i UniswapV3Pool
		if err := rows.Scan(
			&i.Address,
			&i.Token0,
			&i.Token1,
			&i.Fee,
			&i.TickSpacing,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
