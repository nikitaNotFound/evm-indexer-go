// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: raw_txs.sql

package sqlcgen

import (
	"context"
)

const addRawTx = `-- name: AddRawTx :exec
INSERT INTO raw_txs (
    hash,
    from_address,
    to_address,
    value,
    timestamp,
    block_number,
    input_data,
    gas_used,
    gas_price,
    gas_limit,
    max_priority_fee,
    max_fee
)
VALUES (
    $1::VARCHAR(255),
    $2::VARCHAR(255),
    $3::VARCHAR(255),
    $4::VARCHAR(255),
    $5::BIGINT,
    $6::BIGINT,
    $7::VARCHAR(255),
    $8::VARCHAR(255),
    $9::VARCHAR(255),
    $10::VARCHAR(255),
    $11::VARCHAR(255),
    $12::VARCHAR(255)
)
`

type AddRawTxParams struct {
	Hash           string `json:"hash"`
	FromAddress    string `json:"from_address"`
	ToAddress      string `json:"to_address"`
	Value          string `json:"value"`
	Timestamp      int64  `json:"timestamp"`
	BlockNumber    int64  `json:"block_number"`
	InputData      string `json:"input_data"`
	GasUsed        string `json:"gas_used"`
	GasPrice       string `json:"gas_price"`
	GasLimit       string `json:"gas_limit"`
	MaxPriorityFee string `json:"max_priority_fee"`
	MaxFee         string `json:"max_fee"`
}

func (q *Queries) AddRawTx(ctx context.Context, arg AddRawTxParams) error {
	_, err := q.db.ExecContext(ctx, addRawTx,
		arg.Hash,
		arg.FromAddress,
		arg.ToAddress,
		arg.Value,
		arg.Timestamp,
		arg.BlockNumber,
		arg.InputData,
		arg.GasUsed,
		arg.GasPrice,
		arg.GasLimit,
		arg.MaxPriorityFee,
		arg.MaxFee,
	)
	return err
}

const getTransactionByHash = `-- name: GetTransactionByHash :one
SELECT hash, from_address, to_address, value, timestamp, block_number, input_data, gas_used, gas_price, gas_limit, max_priority_fee, max_fee FROM raw_txs WHERE hash = $1
`

func (q *Queries) GetTransactionByHash(ctx context.Context, hash string) (*RawTx, error) {
	row := q.db.QueryRowContext(ctx, getTransactionByHash, hash)
	var i RawTx
	err := row.Scan(
		&i.Hash,
		&i.FromAddress,
		&i.ToAddress,
		&i.Value,
		&i.Timestamp,
		&i.BlockNumber,
		&i.InputData,
		&i.GasUsed,
		&i.GasPrice,
		&i.GasLimit,
		&i.MaxPriorityFee,
		&i.MaxFee,
	)
	return &i, err
}
