// Package apigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package apigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for UniswapV2PoolVersion.
const (
	V2 UniswapV2PoolVersion = "v2"
)

// Defines values for UniswapV3PoolVersion.
const (
	V3 UniswapV3PoolVersion = "v3"
)

// Block Block information from EVM network
type Block struct {
	// BurntFees Total burnt fees in the block (in wei)
	BurntFees string `json:"burnt_fees"`

	// FeeRecipient Address that receives block rewards (0x prefixed hex string)
	FeeRecipient string `json:"fee_recipient"`

	// GasPrice Base gas price for the block (in wei)
	GasPrice string `json:"gas_price"`

	// Hash Block hash (0x prefixed hex string)
	Hash string `json:"hash"`

	// Number Block number
	Number int64 `json:"number"`

	// Timestamp Block timestamp (Unix timestamp)
	Timestamp int64 `json:"timestamp"`

	// TotalFees Total fees paid in the block (in wei)
	TotalFees string `json:"total_fees"`

	// TotalGas Total gas used in the block
	TotalGas uint64 `json:"total_gas"`
}

// Error Error response
type Error struct {
	// Code Error code
	Code string `json:"code"`

	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Error Error message
	Error string `json:"error"`
}

// Pool defines model for Pool.
type Pool struct {
	union json.RawMessage
}

// PoolsResponse Response containing pool data with pagination info
type PoolsResponse struct {
	// Limit Number of pools returned in this response
	Limit int `json:"limit"`

	// Offset Number of pools skipped
	Offset int `json:"offset"`

	// Pools Array of pool objects
	Pools []Pool `json:"pools"`

	// Total Total number of pools available
	Total int `json:"total"`
}

// RawTx Raw transaction data from EVM network
type RawTx struct {
	// BlockNumber Block number containing this transaction
	BlockNumber int64 `json:"block_number"`

	// FromAddress Sender address (0x prefixed hex string)
	FromAddress string `json:"from_address"`

	// GasLimit Gas limit for this transaction
	GasLimit uint64 `json:"gas_limit"`

	// GasPrice Gas price paid (in wei)
	GasPrice string `json:"gas_price"`

	// GasUsed Gas used by this transaction
	GasUsed uint64 `json:"gas_used"`

	// Hash Transaction hash (0x prefixed hex string)
	Hash string `json:"hash"`

	// InputData Transaction input data (hex encoded)
	InputData string `json:"input_data"`

	// MaxFee Maximum fee per gas (in wei)
	MaxFee string `json:"max_fee"`

	// MaxPriorityFee Maximum priority fee per gas (in wei)
	MaxPriorityFee string `json:"max_priority_fee"`

	// Timestamp Transaction timestamp (Unix timestamp)
	Timestamp int64 `json:"timestamp"`

	// ToAddress Recipient address (0x prefixed hex string, empty for contract creation)
	ToAddress string `json:"to_address"`

	// Value Transaction value in wei
	Value string `json:"value"`
}

// UniswapV2Pool Uniswap V2 pool information
type UniswapV2Pool struct {
	// Address Pool contract address (0x prefixed hex string)
	Address string `json:"address"`

	// Token0 First token address (0x prefixed hex string)
	Token0 string `json:"token0"`

	// Token1 Second token address (0x prefixed hex string)
	Token1 string `json:"token1"`

	// Version Uniswap version
	Version UniswapV2PoolVersion `json:"version"`
}

// UniswapV2PoolVersion Uniswap version
type UniswapV2PoolVersion string

// UniswapV3Pool Uniswap V3 pool information
type UniswapV3Pool struct {
	// Address Pool contract address (0x prefixed hex string)
	Address string `json:"address"`

	// Fee Pool fee (in basis points)
	Fee string `json:"fee"`

	// TickSpacing Tick spacing for the pool
	TickSpacing string `json:"tick_spacing"`

	// Token0 First token address (0x prefixed hex string)
	Token0 string `json:"token0"`

	// Token1 Second token address (0x prefixed hex string)
	Token1 string `json:"token1"`

	// Version Uniswap version
	Version UniswapV3PoolVersion `json:"version"`
}

// UniswapV3PoolVersion Uniswap version
type UniswapV3PoolVersion string

// GetAllPoolsParams defines parameters for GetAllPools.
type GetAllPoolsParams struct {
	// Limit Maximum number of pools to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of pools to skip for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// AsUniswapV2Pool returns the union data inside the Pool as a UniswapV2Pool
func (t Pool) AsUniswapV2Pool() (UniswapV2Pool, error) {
	var body UniswapV2Pool
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUniswapV2Pool overwrites any union data inside the Pool as the provided UniswapV2Pool
func (t *Pool) FromUniswapV2Pool(v UniswapV2Pool) error {
	v.Version = "v2"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUniswapV2Pool performs a merge with any union data inside the Pool, using the provided UniswapV2Pool
func (t *Pool) MergeUniswapV2Pool(v UniswapV2Pool) error {
	v.Version = "v2"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUniswapV3Pool returns the union data inside the Pool as a UniswapV3Pool
func (t Pool) AsUniswapV3Pool() (UniswapV3Pool, error) {
	var body UniswapV3Pool
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUniswapV3Pool overwrites any union data inside the Pool as the provided UniswapV3Pool
func (t *Pool) FromUniswapV3Pool(v UniswapV3Pool) error {
	v.Version = "v3"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUniswapV3Pool performs a merge with any union data inside the Pool, using the provided UniswapV3Pool
func (t *Pool) MergeUniswapV3Pool(v UniswapV3Pool) error {
	v.Version = "v3"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Pool) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"version"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Pool) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "v2":
		return t.AsUniswapV2Pool()
	case "v3":
		return t.AsUniswapV3Pool()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Pool) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Pool) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get block data by number
	// (GET /blocks/{number})
	GetBlockByNumber(ctx echo.Context, number int64) error
	// Get all indexed pools
	// (GET /pools)
	GetAllPools(ctx echo.Context, params GetAllPoolsParams) error
	// Get transaction data by hash
	// (GET /transactions/{hash})
	GetTransactionByHash(ctx echo.Context, hash string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetBlockByNumber converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockByNumber(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "number" -------------
	var number int64

	err = runtime.BindStyledParameterWithOptions("simple", "number", ctx.Param("number"), &number, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter number: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBlockByNumber(ctx, number)
	return err
}

// GetAllPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllPools(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllPoolsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllPools(ctx, params)
	return err
}

// GetTransactionByHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionByHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash string

	err = runtime.BindStyledParameterWithOptions("simple", "hash", ctx.Param("hash"), &hash, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTransactionByHash(ctx, hash)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/blocks/:number", wrapper.GetBlockByNumber)
	router.GET(baseURL+"/pools", wrapper.GetAllPools)
	router.GET(baseURL+"/transactions/:hash", wrapper.GetTransactionByHash)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
